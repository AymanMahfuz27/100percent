# next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.


# package.json
{
  "name": "wiki-history-game-www",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "format": "prettier --write \"**/*.{js,jsx,ts,tsx,css,scss,json,yml}\"",
    "lint": "eslint --max-warnings=0 --cache --ext .js,.ts,.tsx .",
    "lint-fix": "eslint --fix --cache --ext .js,.ts,.tsx .",
    "start": "next start"
  },
  "dependencies": {
    "axios": "^1.6.7",
    "classnames": "^2.3.1",
    "next": "^14.1.1",
    "react": "18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "18.2.0",
    "react-github-btn": "^1.2.1",
    "react-loader-spinner": "^4.0.0",
    "react-spring": "^9.7.3",
    "seamless-scroll-polyfill": "^1.2.3",
    "tween-functions": "^1.2.0"
  },
  "devDependencies": {
    "@types/node": "^14.14.41",
    "@types/react": "^17.0.3",
    "@types/react-beautiful-dnd": "^13.0.0",
    "@types/react-no-ssr": "^1.1.1",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "eslint": "^8.56.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "prettier": "^2.5.1",
    "sass": "^1.32.10",
    "typescript": "^5.3.3"
  }
}


# tsconfig.json
{
  "compilerOptions": {
    "typeRoots": ["@types", "node_modules/@types"],
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}


# @types\tween-functions.d.ts
declare module "tween-functions" {
  export const easeOutCirc: (
    currentTime: number,
    beginValue: number,
    endValue: number,
    totalDuration: number
  ) => number;
}


# components\board.tsx
import React from "react";
import { DragDropContext, DropResult } from "react-beautiful-dnd";
import { GameState } from "../types/game";
import useAutoMoveSensor from "../lib/useAutoMoveSensor";
import { checkCorrect, getRandomItem, preloadImage } from "../lib/items";
import NextItemList from "./next-item-list";
import PlayedItemList from "./played-item-list";
import styles from "../styles/board.module.scss";
import Hearts from "./hearts";
import GameOver from "./game-over";

interface Props {
  highscore: number;
  resetGame: () => void;
  state: GameState;
  setState: (state: GameState) => void;
  updateHighscore: (score: number) => void;
}

export default function Board(props: Props) {
  const { highscore, resetGame, state, setState, updateHighscore } = props;

  const [isDragging, setIsDragging] = React.useState(false);

  async function onDragStart() {
    setIsDragging(true);
    navigator.vibrate(20);
  }

  async function onDragEnd(result: DropResult) {
    setIsDragging(false);

    const { source, destination } = result;

    if (
      !destination ||
      state.next === null ||
      (source.droppableId === "next" && destination.droppableId === "next")
    ) {
      return;
    }

    const item = { ...state.next };

    if (source.droppableId === "next" && destination.droppableId === "played") {
      const newDeck = [...state.deck];
      const newPlayed = [...state.played];
      const { correct, delta } = checkCorrect(
        newPlayed,
        item,
        destination.index
      );
      newPlayed.splice(destination.index, 0, {
        ...state.next,
        played: { correct },
      });

      const newNext = state.nextButOne;
      const newNextButOne = getRandomItem(
        newDeck,
        newNext ? [...newPlayed, newNext] : newPlayed
      );
      const newImageCache = [preloadImage(newNextButOne.image)];

      setState({
        ...state,
        deck: newDeck,
        imageCache: newImageCache,
        next: newNext,
        nextButOne: newNextButOne,
        played: newPlayed,
        lives: correct ? state.lives : state.lives - 1,
        badlyPlaced: correct
          ? null
          : {
              index: destination.index,
              rendered: false,
              delta,
            },
      });
    } else if (
      source.droppableId === "played" &&
      destination.droppableId === "played"
    ) {
      const newPlayed = [...state.played];
      const [item] = newPlayed.splice(source.index, 1);
      newPlayed.splice(destination.index, 0, item);

      setState({
        ...state,
        played: newPlayed,
        badlyPlaced: null,
      });
    }
  }

  // Ensure that newly placed items are rendered as draggables before trying to
  // move them to the right place if needed.
  React.useLayoutEffect(() => {
    if (
      state.badlyPlaced &&
      state.badlyPlaced.index !== null &&
      !state.badlyPlaced.rendered
    ) {
      setState({
        ...state,
        badlyPlaced: { ...state.badlyPlaced, rendered: true },
      });
    }
  }, [setState, state]);

  const score = React.useMemo(() => {
    return state.played.filter((item) => item.played.correct).length - 1;
  }, [state.played]);

  React.useLayoutEffect(() => {
    if (score > highscore) {
      updateHighscore(score);
    }
  }, [score, highscore, updateHighscore]);

  return (
    <DragDropContext
      onDragEnd={onDragEnd}
      onDragStart={onDragStart}
      sensors={[useAutoMoveSensor.bind(null, state)]}
    >
      <div className={styles.wrapper}>
        <div className={styles.top}>
          <Hearts lives={state.lives} />
          {state.lives > 0 ? (
            <>
              <NextItemList next={state.next} />
            </>
          ) : (
            <GameOver
              highscore={highscore}
              resetGame={resetGame}
              score={score}
            />
          )}
        </div>
        <div id="bottom" className={styles.bottom}>
          <PlayedItemList
            badlyPlacedIndex={
              state.badlyPlaced === null ? null : state.badlyPlaced.index
            }
            isDragging={isDragging}
            items={state.played}
          />
        </div>
      </div>
    </DragDropContext>
  );
}


# components\button.tsx
import React from "react";
import classNames from "classnames";
import styles from "../styles/button.module.scss";

interface Props {
  minimal?: boolean;
  onClick: () => void;
  text: string;
}

export default function Button(props: Props) {
  const { minimal = false, onClick, text } = props;

  return (
    <button
      onClick={onClick}
      className={classNames(styles.button, { [styles.minimal]: minimal })}
    >
      {text}
    </button>
  );
}


# components\game-over.tsx
import React from "react";
import { animated, useSpring } from "react-spring";
import styles from "../styles/game-over.module.scss";
import Button from "./button";
import Score from "./score";

interface Props {
  highscore: number;
  resetGame: () => void;
  score: number;
}

const defaultShareText = "Share";

function getMedal(score: number): string {
  if (score >= 20) {
    return "🥇 ";
  } else if (score >= 10) {
    return "🥈 ";
  } else if (score >= 1) {
    return "🥉 ";
  }
  return "";
}

export default function GameOver(props: Props) {
  const { highscore, resetGame, score } = props;

  const animProps = useSpring({
    opacity: 1,
    from: { opacity: 0 },
    config: { duration: 500 },
  });

  const [shareText, setShareText] = React.useState(defaultShareText);

  const share = React.useCallback(async () => {
    await navigator?.clipboard?.writeText(
      `🏛️ wikitrivia.tomjwatson.com\n\n${getMedal(
        score
      )}Streak: ${score}\n${getMedal(highscore)}Best Streak: ${highscore}`
    );
    setShareText("Copied");
    setTimeout(() => {
      setShareText(defaultShareText);
    }, 2000);
  }, [highscore, score]);

  return (
    <animated.div style={animProps} className={styles.gameOver}>
      <div className={styles.scoresWrapper}>
        <div className={styles.score}>
          <Score score={score} title="Streak" />
        </div>
        <div className={styles.score}>
          <Score score={highscore} title="Best streak" />
        </div>
      </div>
      <div className={styles.buttons}>
        <Button onClick={resetGame} text="Play again" />
        <Button onClick={share} text={shareText} minimal />
      </div>
    </animated.div>
  );
}


# components\game.tsx
import React, { useState } from "react";
import axios from "axios";
import { GameState } from "../types/game";
import { Item } from "../types/item";
import createState from "../lib/create-state";
import Board from "./board";
import Loading from "./loading";
import Instructions from "./instructions";
import badCards from "../lib/bad-cards";

const data = {
  "Republicans say they would be pleased if the supreme court reduced abortion rights?": 43,
"Republicans say that abortion should never be permitted?": 19,
"Republicans are willing to open up protected nature areas for economic development?": 16,
"Republicans say that the US spends too much on alternative energy sources?": 23,
"Republicans support laws that protect gays and lesbians against job discrimination?": 81,
"Republicans support requiring background checks for gun purchases at gun shows or private sales?": 82,
"Republicans say that the government should make it easier to buy a gun?": 11,
"Republicans say that the US spends too much on the nation's health?": 16,
"Republicans support making all unauthorized immigrants felons and sending them back?": 24,
"Republicans support sending back children who were brought to the US illegally and have lived here for 10+ years?": 21,
"Republicans say that the federal minimum wage should be decreased?": 4,
"Republicans oppose requiring employers to offer paid leave to parents of new children?": 13,
"Republicans say that the police officers never use more force than necessary?": 3,
"Republicans support requiring police officers to wear body cameras while on duty?": 88,
"Republicans say that blacks face no discrimination at all in the US?": 5,
"Republicans believe that the legacy of slavery affects the position of black people in society today?": 68,
"Republicans think that high-income individuals pay the right amount in taxes?": 29,
"Republicans say that eligible voters are never denied the right to vote?": 23,
"Democrats believe that climate change has been mostly due to human activity?": 69,
"Democrats are unwilling to pay much higher prices in order to protect the environment?": 17,
"Democrats support the death penalty for convicted murderers?": 44,
"Democrats oppose making free trade agreements with other countries?": 7,
"Democrats support lowering the eligibility age for Medicare from 65 to 50?": 77,
"Democrats feel that courts deal too harshly with criminals?": 40,
"Democrats say that the US spends too much on reducing crime rates?": 8,
"Democrats believe that the legacy of slavery affects the position of black people in society today?": 97,
"Democrats think that high-income individuals pay too little in taxes?": 75,
"Democrats say that transgender people face no discrimination at all in the US?": 7,
"Democrats support requiring showing a government photo ID when voting?": 48,
"Democrats say that eligible voters are never denied the right to vote?": 7,
"Democrats say that the US spends too little on assistance to the poor?": 44,
"Adults say they would like to bring back dinosaurs?": 12,
"Adults say that chocolate glazed donuts are their favorite donuts?": 12,
"Adults in a relationship met their partner online?": 12,
"Adults have at least one tattoo?": 26,
"Adults are single?": 31,
"Adults consider a hotdog to be a sandwich?": 36,
"Adults believe in ghosts?": 36,
"Adults like their eggs scrambled?": 37,
"Adults believe in UFOs?": 39,
"Dog owners got their dogs from a shelter?": 40,
"Adults set an alarm but do not snooze when waking up?": 40,
"Pet owners dress up their pets for Halloween?": 45,
"Adults say they drink coffee every day?": 62,
"TV-owning adults watched Neil Armstrong set foot on the moon?": 94,
"Adults say they have had a teacher who changed their life for the better?": 94,
"Households are dog owners?": 54,
"Adults in a relationship say they are satisfied with their relationship?": 94,
};

const items: Item[] = Object.entries(data).map(([label, percentage], index) => ({
  id: `item-${index}`,
  label,
  year: percentage, // Using the percentage in place of year
  description: label,
  date_prop_id: "P580", // Arbitrary ID, as it’s not used in comparison
  instance_of: ["statement"],
  image: "", // Placeholder, can be updated to include relevant images
  wikipedia_title: "", // Placeholder
  num_sitelinks: 0,
  occupations: null,
  page_views: 0,
}));


export default function Game() {
  const [state, setState] = useState<GameState | null>(null);
  const [loaded, setLoaded] = useState(false);
  const [started, setStarted] = useState(false);

  React.useEffect(() => {
    const initializeGameState = async () => {
      setState(await createState(items));
      setLoaded(true);
    };

    initializeGameState();
  }, []);

  const resetGame = React.useCallback(() => {
    (async () => {
      setState(await createState(items));
    })();
  }, []);

  const [highscore, setHighscore] = React.useState<number>(
    Number(localStorage.getItem("highscore") ?? "0")
  );

  const updateHighscore = React.useCallback((score: number) => {
    localStorage.setItem("highscore", String(score));
    setHighscore(score);
  }, []);

  if (!loaded || state === null) {
    return <Loading />;
  }

  if (!started) {
    return (
      <Instructions highscore={highscore} start={() => setStarted(true)} />
    );
  }

  return (
    <Board
      highscore={highscore}
      state={state}
      setState={setState}
      resetGame={resetGame}
      updateHighscore={updateHighscore}
    />
  );
}

# components\hearts.tsx
import { useSpring, animated } from "react-spring";
import React from "react";
import styles from "../styles/hearts.module.scss";

interface HeartProps {
  have: boolean;
}

function Heart(props: HeartProps) {
  const { have } = props;
  const { opacity } = useSpring({
    opacity: have ? 1 : 0.4,
    config: { duration: 300 },
  });
  const { scale } = useSpring({
    scale: have ? 1 : 0.8,
    config: { mass: 1, tension: 200, friction: 20, duration: 300 },
    delay: 200,
  });

  return (
    <animated.img
      className={styles.heart}
      style={{ opacity, scale }}
      src="/images/heart.svg"
    />
  );
}

interface Props {
  lives: number;
}

export default function Hearts(props: Props) {
  const { lives } = props;

  return (
    <div className={styles.hearts}>
      <Heart have={lives >= 1} />
      <Heart have={lives >= 2} />
      <Heart have={lives >= 3} />
      <Heart have={lives >= 4} />
      <Heart have={lives >= 5} />
      <Heart have={lives >= 6} />
    </div>
  );
}


# components\instructions.tsx
import React from "react";
import GitHubButton from "react-github-btn";
import styles from "../styles/instructions.module.scss";
import Button from "./button";
import Score from "./score";

interface Props {
  highscore: number;
  start: () => void;
}

export default function Instructions(props: Props) {
  const { highscore, start } = props;

  return (
    <div className={styles.instructions}>
      <div className={styles.wrapper}>
        <h2>Place the cards on the timeline in the correct order.</h2>
        {highscore !== 0 && (
          <div className={styles.highscoreWrapper}>
            <Score score={highscore} title="Best streak" />
          </div>
        )}
        <Button onClick={start} text="Start game" />
        <div className={styles.about}>
          <div>
            All data sourced from{" "}
            <a
              href="https://www.wikidata.org"
              target="_blank"
              rel="noopener noreferrer"
            >
              Wikidata
            </a>{" "}
            and{" "}
            <a
              href="https://www.wikipedia.org"
              target="_blank"
              rel="noopener noreferrer"
            >
              Wikipedia
            </a>
            .
          </div>
          <div>
            Have feedback? Please report it on{" "}
            <a
              href="https://github.com/tom-james-watson/wikitrivia/issues/"
              target="_blank"
              rel="noopener noreferrer"
            >
              GitHub
            </a>
            .
          </div>
          <GitHubButton
            href="https://github.com/tom-james-watson/wikitrivia"
            data-size="large"
            data-show-count="true"
            aria-label="Star tom-james-watson/wikitrivia on GitHub"
          >
            Star
          </GitHubButton>
        </div>
      </div>
    </div>
  );
}


# components\item-card.tsx
import React from "react";
import classNames from "classnames";
import { Draggable } from "react-beautiful-dnd";
import { Item, PlayedItem } from "../types/item";
import styles from "../styles/item-card.module.scss";

type Props = {
  draggable?: boolean;
  flippedId?: null | string;
  index: number;
  item: Item | PlayedItem;
  setFlippedId?: (flippedId: string | null) => void;
};

export default function ItemCard(props: Props) {
  const { draggable, flippedId, index, item, setFlippedId } = props;

  const flipped = item.id === flippedId;

  return (
    <Draggable draggableId={item.id} index={index} isDragDisabled={!draggable}>
      {(provided, snapshot) => {
        return (
          <div
            className={classNames(styles.itemCard, {
              [styles.played]: "played" in item,
              [styles.flipped]: flipped,
              [styles.dragging]: snapshot.isDragging,
            })}
            ref={provided.innerRef}
            {...provided.draggableProps}
            {...provided.dragHandleProps}
            onClick={() => {
              if ("played" in item && setFlippedId) {
                if (flipped) {
                  setFlippedId(null);
                } else {
                  setFlippedId(item.id);
                }
              }
            }}
          >
            <div className={styles.front}>
              <div className={styles.top}>
                <div className={styles.label}>{item.label}</div>
                {/* <div className={styles.description}>{item.description}</div> */}
              </div>
              <div className={styles.image}></div>
              <div className={styles.bottom}>
                <span>
                  {"played" in item
                    ? `${item.year}%`
                    : ""}
                </span>
              </div>
            </div>
          </div>
        );
      }}
    </Draggable>
  );
}



# components\loading.tsx
import React from "react";
import Loader from "react-loader-spinner";
import styles from "../styles/loading.module.scss";

export default function Loading() {
  return (
    <div className={styles.loading}>
      <h1>Loading</h1>
      <Loader type="Oval" color="#006699" height={60} width={60} />
    </div>
  );
}


# components\next-item-list.tsx
import React from "react";
import { Droppable } from "react-beautiful-dnd";
import { Item } from "../types/item";
import ItemCard from "./item-card";
import styles from "../styles/next-item-list.module.scss";

interface NextItemListProps {
  next: Item | null;
}

export default function NextItemList(props: NextItemListProps) {
  const { next } = props;

  return (
    <div className={styles.container}>
      <Droppable droppableId="next" direction="horizontal">
        {(provided) => (
          <div className={styles.wrapper}>
            <div
              ref={provided.innerRef}
              {...provided.droppableProps}
              className={styles.list}
            >
              {next && (
                <ItemCard draggable index={0} item={next} key={next.id} />
              )}
              {provided.placeholder}
            </div>
          </div>
        )}
      </Droppable>
    </div>
  );
}


# components\played-item-list.tsx
import React from "react";
import { Droppable } from "react-beautiful-dnd";
import { Item } from "../types/item";
import ItemCard from "./item-card";
import styles from "../styles/played-item-list.module.scss";

interface PlayedItemListProps {
  badlyPlacedIndex: number | null;
  isDragging: boolean;
  items: Item[];
}

export default function PlayedItemList(props: PlayedItemListProps) {
  const { badlyPlacedIndex, isDragging, items } = props;

  const [flippedId, setFlippedId] = React.useState<null | string>(null);

  React.useEffect(() => {
    if (isDragging && flippedId !== null) {
      setFlippedId(null);
    }
  }, [flippedId, isDragging]);

  return (
    <div className={styles.wrapper}>
      <div className={styles.listContainer}>
        <Droppable droppableId="played" direction="horizontal">
          {(provided) => (
            <div
              ref={provided.innerRef}
              {...provided.droppableProps}
              className={styles.list}
            >
              <div className={styles.timelineContainer}>
                <div className={styles.timeline}></div>
              </div>
              <div className={styles.items}>
                {items.map((item, index) => (
                  <ItemCard
                    draggable={badlyPlacedIndex !== null}
                    flippedId={flippedId}
                    index={index}
                    item={item}
                    key={item.id}
                    setFlippedId={setFlippedId}
                  />
                ))}
              </div>
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </div>
    </div>
  );
}


# components\score.tsx
import React from "react";
import styles from "../styles/score.module.scss";

interface Props {
  score: number;
  title: string;
}

export default function Score(props: Props) {
  const { score, title } = props;

  let backgroundColor = "#ffffff";

  if (score >= 20) {
    backgroundColor = "#FFC940";
  } else if (score >= 10) {
    backgroundColor = "#A7B6C2";
  } else if (score >= 1) {
    backgroundColor = "#C99765";
  }

  return (
    <div className={styles.score} style={{ backgroundColor }}>
      <div className={styles.title}>{title}</div>
      <div className={styles.value}>{score}</div>
    </div>
  );
}


# lib\bad-cards.ts
const badCards = {
  Q745019: "Colt's Manufacturing Company",
  Q697675: "Gigabyte Technology",
  Q157064: "Puma (brand)",
  Q179900: "David (Michelangelo)",
  Q218567: "Law & Order SVU",
  Q486682: "Crips",
  Q12871: "Simon the Zealot",
  Q5505: "Lake Victoria",
  Q58784: "Das Kapital",
  Q345: "Virgin Mary",
  Q184742: "Metamorphoses",
  Q128267: "Joseph",
  Q60220: "Aeneid",
  Q25716: "1st millennium BC",
  Q134862: "Champagne",
  Q207193: "Skellig Michael",
  Q38526: "1,000,000",
  Q193159: "Russian Armed Forces",
  Q43343: "Folk music",
  Q10282403: "Surgical mask",
  Q46197: "Ascension",
  Q132851: "Admiral",
  Q55629: "Epsom Derby",
  Q828435: "Spanish conquest of the Aztec Empire",
  Q460584: "Scala",
  Q244157: "Igbo people",
  Q1990219: "French colonization of the Americas",
  Q321303: "The Garden of Earthly Delights",
  Q9730: "Classical music",
  Q221062: "DuPont",
  Q39427: "Surrealism",
  Q219995: "Guanches",
  Q833163: "Knight Bachelor",
  Q42233: "Sickle",
  Q80290: "Forbidden City",
  Q39950: "Vedas",
  Q468836: "Raedwald of East Anglia",
  Q73801: "Xbox Game Studios",
  Q81018: "Judas Iscariot",
  Q528187: "Pringles",
  Q187846: "Russian Alphabet",
  Q99309: "Pantheon, Rome",
  Q55: "Netherlands",
  Q80344: "Mount Olympus",
  Q161718: "United Nations Development Programme",
  Q3293295: "Turkish Naval Forces",
  Q1059358: "Rubáiyát of Omar Khayyám",
  Q82996: "Runes",
  Q106187: "Giant's Causeway",
  Q213804: "Lindisfarne",
  Q229702: "Ham (son of Noah)",
  Q830183: "Eve",
  Q44996: "The Oxford English Dictionary",
  Q212746: "Anglo-Saxon Chronicle",
  Q41726: "Freemasonry",
  Q142: "France",
  Q115: "Ethiopia",
  Q12263: "Mahjong",
  Q213633: "Deborah",
  Q7734: "Joshua",
  Q202466: "Blond",
  Q94787: "Sunflower Oil",
  Q174640: "V-2 Rocket",
  Q1616457: "Mycroft Holmes",
  Q302: "Jesus",
  Q84422877: "Samaritan woman",
  Q917374: "Norwegian Armed Forces",
  Q718: "Chess",
  Q183: "Germany",
  Q38: "Italy",
  Q1649955: "Scarlett O'Hara",
  Q1768161: "Abraham in Islam",
  Q11768: "Ancient Egypt",
  Q304673: "Platoon",
  Q43982: "Bartholomew the Apostle",
  Q36: "Poland",
  Q47128: "Christmas Tree",
  Q242382: "Thusnelda",
  Q1069785: "Hong Kong Flu",
  Q183562: "Umayyad Mosque",
  Q82613: "Krakatoa",
  Q459188: "Kingdom of the Isles",
  Q465283: "Russian Navy",
  Q461606: "Arsène Lupin",
  Q304690: "Li Ching-Yuen",
  Q2001966: "Company rule in India",
  Q651532: "The Three Little Pigs",
  Q184661: "Ogham",
  Q31057: "Norfolk Island",
  Q1246283: "Kumbhalgarh",
  Q735349: "Russian conquest of Siberia",
  Q2223341: "Elizabeth Bennet",
  Q40185: "Divine Comedy",
  Q2723024: "Enron scandal",
  Q133600: "Banksy",
  Q14112: "Corsica",
  Q1892745: "Salvator Mundi (Leonardo)",
  Q994776: "Brutalist architecture",
  Q182865: "War in Afghanistan",
  Q936394: "Pornhub",
  Q466683: "Chyna",
  Q824540: "AVN Awards",
  Q19559884: "August Ames",
  Q2709: "Sasha Grey",
  Q260794: "Sunny Leone",
  Q973475: "Dustin Diamond",
  Q3700050: "XVideos",
  Q18735049: "Mia Khalifa",
  Q233118: "Traci Lords",
  Q3916703: "Riley Reid",
  Q18749736: "Johnny Sins",
  Q65115154: "Belle Delphine",
  Q739550: "M&M's",
  Q1431121: "St Michael's Mount",
  Q174097: "Hogwarts",
  Q8690: "Cultural Revolution",
  Q149086: "Homicide"
};

export default badCards;


# lib\create-state.ts
import { GameState } from "../types/game";
import { Item } from "../types/item";
import { getRandomItem, preloadImage } from "./items";

export default async function createState(deck: Item[]): Promise<GameState> {
  const played = [{ ...getRandomItem(deck, []), played: { correct: true } }];
  const next = getRandomItem(deck, played);
  const nextButOne = getRandomItem(deck, [...played, next]);
  const imageCache = [preloadImage(next.image), preloadImage(nextButOne.image)];

  return {
    badlyPlaced: null,
    deck,
    imageCache,
    lives: 6,
    next,
    nextButOne,
    played,
  };
}


# lib\image.ts
export function createWikimediaImage(image: string, width = 300): string {
  return `https://commons.wikimedia.org/w/index.php?title=Special:Redirect/file/${encodeURIComponent(
    image
  )}&width=${width}`;
}


# lib\items.ts
import { Item, PlayedItem } from "../types/item";
import { createWikimediaImage } from "./image";

export function getRandomItem(deck: Item[], played: Item[]): Item {
  const candidates = deck.filter((candidate) => {
    if (tooClose(candidate, played)) {
      return false;
    }
    return true;
  });

  if (candidates.length > 0) {
    return candidates[Math.floor(Math.random() * candidates.length)];
  }
  return deck[Math.floor(Math.random() * deck.length)];
}

function tooClose(item: Item, played: Item[]) {
  let distance = (played.length < 40) ? 5 : 1;
  if (played.length < 11)
    distance = 110 - 10 * played.length;

  return played.some((p) => Math.abs(item.year - p.year) < distance);
}


export function checkCorrect(
  played: PlayedItem[],
  item: Item,
  index: number
): { correct: boolean; delta: number } {
  const sorted = [...played, item].sort((a, b) => a.year - b.year); // Compare based on percentages (year now represents percentage)
  const correctIndex = sorted.findIndex((i) => i.id === item.id);

  if (index !== correctIndex) {
    return { correct: false, delta: correctIndex - index };
  }

  return { correct: true, delta: 0 };
}

export function preloadImage(url: string): HTMLImageElement {
  const img = new Image();
  img.src = createWikimediaImage(url);
  return img;
}


# lib\timelineData.ts
export const timelineData = {
    "Republicans say they would be pleased if the supreme court reduced abortion rights?": 43,
  "Republicans say that abortion should never be permitted?": 19,
  "Republicans are willing to open up protected nature areas for economic development?": 16,
  "Republicans say that the US spends too much on alternative energy sources?": 23,
  "Republicans support laws that protect gays and lesbians against job discrimination?": 81,
  "Republicans support requiring background checks for gun purchases at gun shows or private sales?": 82,
  "Republicans say that the government should make it easier to buy a gun?": 11,
  "Republicans say that the US spends too much on the nation's health?": 16,
  "Republicans support making all unauthorized immigrants felons and sending them back?": 24,
  "Republicans support sending back children who were brought to the US illegally and have lived here for 10+ years?": 21,
  "Republicans say that the federal minimum wage should be decreased?": 4,
  "Republicans oppose requiring employers to offer paid leave to parents of new children?": 13,
  "Republicans say that the police officers never use more force than necessary?": 3,
  "Republicans support requiring police officers to wear body cameras while on duty?": 88,
  "Republicans say that blacks face no discrimination at all in the US?": 5,
  "Republicans believe that the legacy of slavery affects the position of black people in society today?": 68,
  "Republicans think that high-income individuals pay the right amount in taxes?": 29,
  "Republicans say that eligible voters are never denied the right to vote?": 23,
  "Democrats believe that climate change has been mostly due to human activity?": 69,
  "Democrats are unwilling to pay much higher prices in order to protect the environment?": 17,
  "Democrats support the death penalty for convicted murderers?": 44,
  "Democrats oppose making free trade agreements with other countries?": 7,
  "Democrats support lowering the eligibility age for Medicare from 65 to 50?": 77,
  "Democrats feel that courts deal too harshly with criminals?": 40,
  "Democrats say that the US spends too much on reducing crime rates?": 8,
  "Democrats believe that the legacy of slavery affects the position of black people in society today?": 97,
  "Democrats think that high-income individuals pay too little in taxes?": 75,
  "Democrats say that transgender people face no discrimination at all in the US?": 7,
  "Democrats support requiring showing a government photo ID when voting?": 48,
  "Democrats say that eligible voters are never denied the right to vote?": 7,
  "Democrats say that the US spends too little on assistance to the poor?": 44,
  "Adults say they would like to bring back dinosaurs?": 12,
  "Adults say that chocolate glazed donuts are their favorite donuts?": 12,
  "Adults in a relationship met their partner online?": 12,
  "Adults have at least one tattoo?": 26,
  "Adults are single?": 31,
  "Adults consider a hotdog to be a sandwich?": 36,
  "Adults believe in ghosts?": 36,
  "Adults like their eggs scrambled?": 37,
  "Adults believe in UFOs?": 39,
  "Dog owners got their dogs from a shelter?": 40,
  "Adults set an alarm but do not snooze when waking up?": 40,
  "Pet owners dress up their pets for Halloween?": 45,
  "Adults say they drink coffee every day?": 62,
  "TV-owning adults watched Neil Armstrong set foot on the moon?": 94,
  "Adults say they have had a teacher who changed their life for the better?": 94,
  "Households are dog owners?": 54,
  "Adults in a relationship say they are satisfied with their relationship?": 94,
  };
  
  export interface TimelineItem {
    id: string;
    statement: string;
    percentage: number;
  }
  
  export function getTimelineItems(): TimelineItem[] {
    return Object.entries(timelineData).map(([statement, percentage], index) => ({
      id: `item-${index}`,
      statement,
      percentage,
    }));
  }

# lib\useAutoMoveSensor.ts
import { FluidDragActions, SensorAPI } from "react-beautiful-dnd";
import * as tweenFunctions from "tween-functions";
import { GameState } from "../types/game";

function moveStepByStep(
  drag: FluidDragActions,
  transformValues: number[],
  scrollValues: number[]
) {
  requestAnimationFrame(() => {
    const bottom = document.getElementById("bottom");

    if (bottom === null) {
      throw new Error("Can't find #bottom");
    }

    const newPosition = transformValues.shift();
    const newScroll = scrollValues.shift();

    if (newPosition === undefined || newScroll === undefined) {
      drag.drop();
    } else {
      bottom.scrollLeft = newScroll;
      drag.move({ x: newPosition, y: 0 });
      moveStepByStep(drag, transformValues, scrollValues);
    }
  });
}

export default async function useAutoMoveSensor(
  state: GameState,
  api: SensorAPI
) {
  if (
    state.badlyPlaced === null ||
    state.badlyPlaced.index === null ||
    state.badlyPlaced.rendered === false
  ) {
    return;
  }

  const preDrag = api.tryGetLock?.(state.played[state.badlyPlaced.index].id);

  if (!preDrag) {
    return;
  }

  const itemEl: HTMLElement | null = document.querySelector(
    `[data-rbd-draggable-id='${state.played[state.badlyPlaced.index].id}']`
  );
  const destEl: HTMLElement | null = document.querySelector(
    `[data-rbd-draggable-id='${
      state.played[state.badlyPlaced.index + state.badlyPlaced.delta].id
    }']`
  );
  const bottomEl: HTMLElement | null = document.getElementById("bottom");

  if (itemEl === null || destEl === null || bottomEl === null) {
    throw new Error("Can't find element");
  }

  const bottomElCentreLeft = bottomEl.scrollLeft + bottomEl.clientWidth / 4;
  const bottomElCentreRight =
    bottomEl.scrollLeft + (bottomEl.clientWidth / 4) * 3 - itemEl.clientWidth;

  let scrollDistance = 0;

  if (
    destEl.offsetLeft < bottomElCentreLeft ||
    destEl.offsetLeft > bottomElCentreRight
  ) {
    // Destination is not in middle two quarters of the screen. Calculate
    // distance we therefore need to scroll.
    scrollDistance =
      destEl.offsetLeft < bottomElCentreLeft
        ? destEl.offsetLeft - bottomElCentreLeft
        : destEl.offsetLeft - bottomElCentreRight;

    if (bottomEl.scrollLeft + scrollDistance < 0) {
      scrollDistance = -bottomEl.scrollLeft;
    } else if (
      bottomEl.scrollLeft + scrollDistance >
      bottomEl.scrollWidth - bottomEl.clientWidth
    ) {
      scrollDistance =
        bottomEl.scrollWidth - bottomEl.clientWidth - bottomEl.scrollLeft;
    }
  }

  // Calculate the distance we need to move the item after taking into account
  // how far we are scrolling.
  const transformDistance =
    destEl.offsetLeft - itemEl.offsetLeft - scrollDistance;

  const drag = preDrag.fluidLift({ x: 0, y: 0 });

  // Create a series of eased transformations and scrolls to animate from the
  // current state to the desired state.
  const transformPoints = [];
  const scrollPoints = [];
  const numberOfPoints = 30 + 5 * Math.abs(state.badlyPlaced.delta);

  for (let i = 0; i < numberOfPoints; i++) {
    transformPoints.push(
      tweenFunctions.easeOutCirc(i, 0, transformDistance, numberOfPoints)
    );
    scrollPoints.push(
      tweenFunctions.easeOutCirc(
        i,
        bottomEl.scrollLeft,
        bottomEl.scrollLeft + scrollDistance,
        numberOfPoints
      )
    );
  }

  moveStepByStep(drag, transformPoints, scrollPoints);
}


# pages\index.tsx
import React from "react";
import Head from "next/head";
import dynamic from "next/dynamic";

const Game = dynamic(() => import("../components/game"), { ssr: false });

export default function Index() {
  return (
    <>
      <Head>
        <title>Wikitrivia</title>
        <link
          rel="shortcut icon"
          href="data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20100%20100%22%3E%3Ctext%20y%3D%22.9em%22%20font-size%3D%2290%22%3E%F0%9F%8F%9B%EF%B8%8F%3C%2Ftext%3E%3C%2Fsvg%3E"
          type="image/svg+xml"
        />
      </Head>

      <Game />
    </>
  );
}


# pages\_app.tsx
import React from "react";
import { AppProps } from "next/app";
import { polyfill } from "seamless-scroll-polyfill";
import "../styles/globals.scss";

function App({ Component, pageProps }: AppProps) {
  React.useEffect(() => {
    polyfill();
  }, []);

  return <Component {...pageProps} />;
}

export default App;


# styles\board.module.scss
.wrapper {
  display: grid;
  grid-auto-columns: auto;
  grid-template-rows: 350px auto;
  width: 100%;
  height: 100%;
}

.top {
  grid-row: 1;
}

.bottom {
  grid-row: 2;
  overflow-x: auto;
  display: flex;
  align-items: center;
  position: relative;
}


# styles\button.module.scss
@import "./variables";

.button {
  border: none;
  background: $primary;
  color: $text-light;
  padding: 10px 24px;
  border-radius: $button-border-radius;
  cursor: pointer;
  text-transform: uppercase;
  font-weight: 700;
  font-style: italic;
  white-space: nowrap;
  width: 140px;

  &:hover {
    filter: brightness(1.3);
  }

  &.minimal {
    background: none;
    border: 2px solid $primary;
  }
}


# styles\game-over.module.scss
@import "./variables";

.gameOver {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-top: 60px;

  .scoresWrapper {
    margin: 40px 0;
    display: flex;
    justify-content: space-evenly;

    .score {
      display: inline-block;

      &:last-child {
        margin-left: 20px;
      }
    }
  }

  .buttons {
    display: flex;

    > button {
      &:not(:last-child) {
        margin-right: 10px;
      }
    }
  }
}


# styles\globals.scss
@import "./variables.scss";
@import "react-loader-spinner/dist/loader/css/react-spinner-loader.css";

html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
  color: $text;
  font-size: 14px;
  background: $background;
}

html,
body,
#__next {
  width: 100%;
  height: 100%;
}

body {
  overscroll-behavior-y: contain;
}

a {
  color: $text-link;
}

* {
  box-sizing: border-box;
}


# styles\hearts.module.scss
@import "./variables";

.hearts {
  display: flex;
  justify-content: center;
  margin-top: 20px;

  .heart {
    height: 50px;
    margin: 10px;
  }
}


# styles\instructions.module.scss
@import "./variables.scss";

.instructions {
  display: flex;
  height: calc(100% - 100px);
  flex-direction: column;
  align-items: center;
  justify-content: center;

  .wrapper {
    padding: 0 20px;
    text-align: center;

    h2 {
      color: $text-light;
      font-style: italic;
      text-transform: uppercase;
      margin-bottom: 40px;
    }

    .highscoreWrapper {
      margin: 40px 0;
    }

    .about {
      position: absolute;
      bottom: 0;
      left: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      width: 100%;
      margin-bottom: 10px;
      color: $text-light;

      > div {
        margin-bottom: 10px;
      }

      a {
        color: $text-light;
        margin-bottom: 10px;
      }
    }
  }
}


# styles\item-card.module.scss
@import "./variables";

.itemCard {
  display: inline-block;
  width: 150px;
  height: 200px;
  margin-top: 20px;
  margin-bottom: 20px;
  margin-right: 20px;
  position: relative;

  .front,
  .back {
    display: flex;
    flex-direction: column;
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    border-radius: $box-border-radius;
    box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px,
      rgba(0, 0, 0, 0.23) 0px 6px 6px;
    background-color: #ffffff;
    will-change: transform, opacity;

    &::after {
      content: "";
      position: absolute;
      z-index: -1;
      width: 100%;
      height: 100%;
      opacity: 0;
      border-radius: $box-border-radius;
      box-shadow: rgba(0, 0, 0, 0.65) 0px 10px 25px,
        rgba(0, 0, 0, 0.75) 0px 6px 12px;
      transition: opacity 0.3s ease-in-out;
    }
  }

  &.dragging {
    .front,
    .back {
      &::after {
        opacity: 1;
      }
    }
  }

  &.played {
    .front,
    .back {
      cursor: pointer;
    }
  }

  &.flipped {
    .front {
      z-index: -1;
    }

    .back {
      z-index: initial;
    }
  }

  .front {
    .top {
      padding: 10px;
    }

    .image {
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      flex-grow: 1;
      min-height: 0;
      background-color: $background-alt;
      background-repeat: no-repeat;
      background-size: cover;
      background-position: 50% 25%;
      padding: 10px;
      padding-bottom: 0;
      color: $text-light;
    }

    .bottom {
      display: flex;
      justify-content: center;
      align-items: center;
      line-height: 30px;
      font-weight: 700;
      background-color: $primary;
      color: $text-light;
      border-radius: 0 0 $box-border-radius $box-border-radius;
      transition: background-color 5s ease-in-out;

      &:hover {
        background-color: #ad310b;
      }

      &.correct {
        background-color: $correct;
      }

      &.incorrect {
        background-color: $incorrect;
      }
    }
  }

  .back {
    display: flex;
    flex-direction: column;
    height: 100%;
    padding: 10px;
    z-index: -1;

    .description {
      overflow: auto;
      flex-grow: 1;
      color: $text;
    }

    .wikipedia {
      margin-top: 10px;
      text-align: center;
    }

    .date {
      margin-top: 5px;
      font-size: 12px;
    }
  }

  .label {
    font-weight: bold;
    word-wrap: break-word;
  }

  .description {
    margin-top: 5px;
    font-size: 12px;
    color: $text-muted;
  }
}


# styles\loading.module.scss
@import "./variables.scss";

.loading {
  display: flex;
  height: calc(100% - 100px);
  flex-direction: column;
  align-items: center;
  justify-content: center;

  h1 {
    color: $text-light;
    margin-bottom: 20px;
  }
}


# styles\next-item-list.module.scss
@import "./variables.scss";

.container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 40px 0;

  .wrapper {
    padding-left: 20px;
    width: 192px;
    position: relative;
    border: 1px dashed $dashes;
    border-radius: 5px;

    .list {
      height: 240px;
    }
  }
}


# styles\played-item-list.module.scss
@import "./variables.scss";

.wrapper {
  width: min-content;
  min-width: 100%;
  height: 100%;

  .listContainer {
    width: min-content;
    min-width: 100%;
    // 20px more on the left because the right has extra 20px margin-right from cards
    padding: 0 40px 0 60px;
    height: 100%;
    position: relative;

    .timelineContainer {
      position: absolute;
      left: 0;
      width: 100%;

      .timeline {
        width: 100%;
        height: 1px;
        border: 1px dashed $dashes;
      }
    }

    .list {
      display: flex;
      align-items: center;
      height: 100%;

      .items {
        display: flex;
        align-items: center;
      }
    }
  }

  @media screen and (max-width: 600px) {
    .listContainer {
      padding: 0;
      padding-left: 20px;
    }
  }
}


# styles\score.module.scss
@import "./variables.scss";

.score {
  display: inline-block;
  transform: skewX(-12deg);
  border-radius: $box-border-radius;
  padding: 10px 24px;
  text-align: left;

  .title {
    font-weight: 700;
    text-transform: uppercase;
    margin-bottom: 5px;
    white-space: nowrap;
  }

  .value {
    display: flex;
    font-weight: 700;
    font-size: 24px;
  }
}


# styles\variables.scss
$background: #ffffff;
$text: #202122;
$text-light: #ffffff;
$text-muted: #0f141d;
$text-link: #0645ad;
$background-alt: #e1e8ed;
$dashes: #5c7080;
$incorrect: #990000;
$correct: #339966;
$primary: #053a55;
$box-border-radius: 8px;
$button-border-radius: 20px;


# types\game.ts
import { Item, PlayedItem } from "./item";

export interface GameState {
  badlyPlaced: {
    index: number;
    rendered: boolean;
    delta: number;
  } | null;
  deck: Item[];
  // If we don't keep a reference to the preloaded images they can end up being
  // garbage collected.
  imageCache: HTMLImageElement[];
  lives: number;
  next: Item | null;
  nextButOne: Item | null;
  played: PlayedItem[];
}


# types\item.ts
export interface Item {
  date_prop_id: string;
  // description: string;
  id: string;
  image: string;
  instance_of: string[];
  label: string;
  num_sitelinks: number;
  occupations: string[] | null;
  page_views: number;
  wikipedia_title: string;
  year: number;
}

export type PlayedItem = Item & {
  played: {
    correct: boolean;
  };
};

